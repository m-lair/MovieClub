name: Create Feedback Issues

on:
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * *' # Runs daily at 9 AM

permissions:
  issues: write

jobs:
  create-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Parse Feedback JSON and Create Issues
        uses: actions/github-script@v6.3.0
        with:
          script: |
            const fs = require('fs');
            const { Octokit } = require('@octokit/rest');
            const github = new Octokit({ auth: process.env.GITHUB_TOKEN });

            // Read and parse the JSON file
            const feedbackData = JSON.parse(fs.readFileSync('./feedback.json', 'utf8')).recentItems;

            // Check if feedback data exists
            if (!feedbackData || !Array.isArray(feedbackData)) {
              console.error("No feedback data found in the JSON file.");
              return;
            }

            // Iterate over the feedback entries
            feedbackData.forEach(async item => {
              const feedbackContainer = item.value;

              // Validate the feedback container and its feedbacks
              if (!feedbackContainer || !feedbackContainer.feedbacks) {
                console.warn("No feedbacks found for an item.");
                return;
              }

              feedbackContainer.feedbacks.forEach(async feedback => {
                const {
                  comment = "No comment provided",
                  firstName = "Unknown",
                  lastName = "Unknown",
                  deviceModel = "Unknown Device",
                  osVersion = "Unknown OS Version",
                  timestamp = "No Timestamp",
                  buildNumber = "Unknown Build",
                  emailAddress = "No Email Provided"
                } = feedback;

                const issueTitle = `Feedback: ${comment.substring(0, 50)}`;

                // Search for existing issues with the same title
                const { data: existingIssues } = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  labels: 'feedback',
                  per_page: 100
                });

                const duplicateIssue = existingIssues.find(issue => issue.title === issueTitle);

                if (!duplicateIssue) {
                  // Create an issue using the GitHub API
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: issueTitle,
                    body: `
                      **Feedback**: ${comment}
                      **Details**:
                      - User: ${firstName} ${lastName}
                      - Email: ${emailAddress}
                      - Device: ${deviceModel}
                      - iOS Version: ${osVersion}
                      - Build Number: ${buildNumber}
                      - Timestamp: ${timestamp}
                    `,
                    labels: ['feedback', 'bug']
                  });
                } else {
                  console.log(`Duplicate issue found: ${issueTitle}`);
                }
              });
            });
